name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      os:
        description: "Operating System"
        required: true
        type: string
      os_version:
        description: "Operating System Version"
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Latest Stable PowerShell Release
        id: get_release
        run: |
          REPO_OWNER="PowerShell"
          REPO_NAME="PowerShell"

          API_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases"

          RESPONSE=$(curl -s $API_URL)

          LATEST_RELEASE=$(echo $RESPONSE | jq '.[] | select(.prerelease == false) | .tag_name' | head -n 1 |  tr -d '"')

          if [[ "$LATEST_RELEASE" == v* ]]; then
            CLEANED_VERSION="${LATEST_RELEASE:1}"
          else
            CLEANED_VERSION="$LATEST_RELEASE"
          fi
          echo "Latest stable release version: $CLEANED_VERSION"

          echo "PWSH_VERSION=$CLEANED_VERSION" >> $GITHUB_ENV

      - name: Show the latest release version
        run: |
          echo "Latest stable release: ${{ env.PWSH_VERSION }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.20.0

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image with Latest PowerShell version
        id: build
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg BASE_OS=${{ inputs.os }} \
            --build-arg BASE_IMAGE_TAG=${{ inputs.os_version }} \
            --build-arg PWSH_VERSION=${{ env.PWSH_VERSION }} \
            -t ${{ vars.DOCKER_USERNAME }}/powershell:${{ inputs.os }}-${{ inputs.os_version }} \
            -t ${{ vars.DOCKER_USERNAME }}/powershell:${{ inputs.os }}-${{ inputs.os_version }}-${{ env.PWSH_VERSION }} \
            . \
            --push